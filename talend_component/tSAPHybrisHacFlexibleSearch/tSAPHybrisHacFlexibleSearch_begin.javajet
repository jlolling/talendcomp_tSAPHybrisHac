<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn 
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.core.model.utils.NodeUtil
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.types.JavaTypesManager
		java.util.List 
		java.util.ArrayList 
    	java.util.Map		
	" 
%>
<% 
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode) codeGenArgument.getArgument();
	String cid = node.getUniqueName();
	IConnection conn = null;
	List<? extends IConnection> outConns = NodeUtil.getOutgoingConnections(node, IConnectionCategory.DATA);
	if (outConns.size() > 0) {
		conn = outConns.get(0);
	}
	List<IMetadataColumn> listColumns = new ArrayList<IMetadataColumn>(); // dummy
	List<IMetadataTable> metadatas = node.getMetadataList();
	if (metadatas != null && metadatas.size() > 0) {
    	IMetadataTable metadata = metadatas.get(0);
    	if (metadata != null) {
    		listColumns = metadata.getListColumns();
		}
	}
   String hybrisEndpoint = ElementParameterParser.getValue(node, "__HYBRIS_ENDPOINT__");
   if (hybrisEndpoint == null || hybrisEndpoint.trim().isEmpty()) {
   	hybrisEndpoint = "null";
   }
   String hybrisLogin = ElementParameterParser.getValue(node, "__HYBRIS_LOGIN__");
   if (hybrisLogin == null || hybrisLogin.trim().isEmpty()) {
   	  hybrisLogin = "null";
   }
   String hybrisPassword = ElementParameterParser.getValue(node, "__HYBRIS_PASSWORD__");
   if (hybrisPassword == null || hybrisPassword.trim().isEmpty()) {
   	  hybrisPassword = "null";
   }
   String query = ElementParameterParser.getValue(node, "__QUERY__");
   if (query != null) {
	   query = query.trim().replace("\r", "").replace("\n", "\\n\" +\n\"");
   } else {
   	  query = "null";
   }
   String maxResult = ElementParameterParser.getValue(node, "__MAX_RESULTS__");
   if (maxResult == null || maxResult.trim().isEmpty()) {
   	  maxResult = "null";
   }
   boolean needHtAccessAuth = "true".equals(ElementParameterParser.getValue(node, "__NEED_HTACCESS_AUTH__"));
   String htaccessLogin = ElementParameterParser.getValue(node, "__HTACCESS_LOGIN__");
   if (needHtAccessAuth == false || htaccessLogin == null || htaccessLogin.trim().isEmpty()) {
		htaccessLogin = "null";
   }
   String htaccessPassword = ElementParameterParser.getValue(node, "__HTACCESS_PASSWORD__");
   if (needHtAccessAuth == false || htaccessPassword == null || htaccessPassword.trim().isEmpty()) {
   		htaccessPassword = "null";
   }
   String timeout = ElementParameterParser.getValue(node, "__TIMEOUT__");
   if (timeout == null || timeout.trim().isEmpty()) {
   		timeout = "null";
   }
%>
	int nb_line_<%=cid%> = 0;
	de.jlo.talendcomp.hac.flexiblesearch.FlexibleSearchRunner <%=cid%> = new de.jlo.talendcomp.hac.flexiblesearch.FlexibleSearchRunner();
	<%=cid%>.setTimeout(<%=timeout%>);
	// add outgoing schema columns for later check		
<%	for (int i = 0; i < listColumns.size(); i++) {
		IMetadataColumn mc = listColumns.get(i);
		String name = mc.getLabel(); %>
	<%=cid%>.addExpectedOutputVariable("<%=name%>");
<%	} %>
	// connect to Hybris
	try {
		<%=cid%>.connect(
		    <%=hybrisEndpoint%>,
			<%=hybrisLogin%>, 
			<%=hybrisPassword%>, 
			<%=htaccessLogin%>, 
			<%=htaccessPassword%>);
	} catch (Exception e) {
		String message = e.getMessage();
		globalMap.put("<%=cid%>_ERROR_MESSAGE", message);
		throw e;
	}
	<%=cid%>.setMaxResults(<%=maxResult%>);
	// run query
	try {
		String query = <%=query%>;
		globalMap.put("<%=cid%>_QUERY", query);
		<%=cid%>.execute(query);
	} catch (Exception e) {
		String message = e.getMessage();
		globalMap.put("<%=cid%>_ERROR_MESSAGE", message);
		throw e;
	}
	// check if our columns fits to the query result
	try {
		<%=cid%>.validateOutputVariables();
	} catch (Exception e) {
		String message = e.getMessage();
		globalMap.put("<%=cid%>_ERROR_MESSAGE", message);
		throw e;
	}
	globalMap.put("<%=cid%>_COUNT_RESULT", <%=cid%>.getQueryResultCount());
<%  if (conn != null) { %>
	while (<%=cid%>.next()) {
		nb_line_<%=cid%>++;
<%		for (int i = 0; i < listColumns.size(); i++) {
			IMetadataColumn mc = listColumns.get(i);
			String name = mc.getLabel();
			String javaClassName = mc.getTalendType().substring(3);
			boolean isDateValue = javaClassName.contains("Date");
			boolean isNullable = mc.isNullable(); %>
		try {
<%			if (isDateValue) { 
				String pattern = mc.getPattern(); 
				if (pattern == null || pattern.trim().isEmpty()) {
					pattern = "null";
				} %>
			<%=conn.getName()%>.<%=mc.getLabel()%> = <%=cid%>.getOutputValueAsDate("<%=name%>",<%=isNullable%>,<%=pattern%>);
<%			} else { %>
			<%=conn.getName()%>.<%=mc.getLabel()%> = <%=cid%>.getOutputValueAs<%=javaClassName%>("<%=name%>",<%=isNullable%>);
<%			} %>
		} catch (Exception ve) {
			String message = "Get output value for column: <%=name%> failed: " + ve.getMessage();
			globalMap.put("<%=cid%>_ERROR_MESSAGE", message);
			throw new Exception(message, ve);
		}
<%		} // for
	} if (conn != null) %>
	